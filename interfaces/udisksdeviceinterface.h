/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -c UdisksDeviceInterface -p udisksdeviceinterface udisksdeviceinterface.xml
 *
 * qdbusxml2cpp is Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef UDISKSDEVICEINTERFACE_H_1428404893
#define UDISKSDEVICEINTERFACE_H_1428404893

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.freedesktop.UDisks.Device
 */
class UdisksDeviceInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.UDisks.Device"; }

public:
    UdisksDeviceInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~UdisksDeviceInterface();

    Q_PROPERTY(QString DeviceFile READ deviceFile)
    inline QString deviceFile() const
    { return qvariant_cast< QString >(property("DeviceFile")); }

    Q_PROPERTY(bool DeviceIsMounted READ deviceIsMounted)
    inline bool deviceIsMounted() const
    { return qvariant_cast< bool >(property("DeviceIsMounted")); }

    Q_PROPERTY(bool DeviceIsOpticalDisk READ deviceIsOpticalDisk)
    inline bool deviceIsOpticalDisk() const
    { return qvariant_cast< bool >(property("DeviceIsOpticalDisk")); }

    Q_PROPERTY(bool DeviceIsSystemInternal READ deviceIsSystemInternal)
    inline bool deviceIsSystemInternal() const
    { return qvariant_cast< bool >(property("DeviceIsSystemInternal")); }

    Q_PROPERTY(QStringList DeviceMountPaths READ deviceMountPaths)
    inline QStringList deviceMountPaths() const
    { return qvariant_cast< QStringList >(property("DeviceMountPaths")); }

    Q_PROPERTY(qulonglong DeviceSize READ deviceSize)
    inline qulonglong deviceSize() const
    { return qvariant_cast< qulonglong >(property("DeviceSize")); }

    Q_PROPERTY(QStringList DriveMediaCompatibility READ driveMediaCompatibility)
    inline QStringList driveMediaCompatibility() const
    { return qvariant_cast< QStringList >(property("DriveMediaCompatibility")); }

    Q_PROPERTY(QString IdLabel READ idLabel)
    inline QString idLabel() const
    { return qvariant_cast< QString >(property("IdLabel")); }

    Q_PROPERTY(QString IdType READ idType)
    inline QString idType() const
    { return qvariant_cast< QString >(property("IdType")); }

    Q_PROPERTY(QString IdUsage READ idUsage)
    inline QString idUsage() const
    { return qvariant_cast< QString >(property("IdUsage")); }

    Q_PROPERTY(QString IdUuid READ idUuid)
    inline QString idUuid() const
    { return qvariant_cast< QString >(property("IdUuid")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString> FilesystemMount(const QString &filesystem_type, const QStringList &options)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(filesystem_type) << QVariant::fromValue(options);
        return asyncCallWithArgumentList(QLatin1String("FilesystemMount"), argumentList);
    }

    inline QDBusPendingReply<> FilesystemUnmount(const QStringList &options)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(options);
        return asyncCallWithArgumentList(QLatin1String("FilesystemUnmount"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace freedesktop {
    namespace UDisks {
      typedef ::UdisksDeviceInterface Device;
    }
  }
}
#endif
